// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	productentity "e-commerce/domains/product/entity"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepoMock is an autogenerated mock type for the IrepoProduct type
type ProductRepoMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: cart
func (_m *ProductRepoMock) Delete(cart productentity.ProductEntity) error {
	ret := _m.Called(cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: cart
func (_m *ProductRepoMock) Find(cart productentity.ProductEntity) (error, productentity.ProductEntity) {
	ret := _m.Called(cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	var r1 productentity.ProductEntity
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) productentity.ProductEntity); ok {
		r1 = rf(cart)
	} else {
		r1 = ret.Get(1).(productentity.ProductEntity)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: cart
func (_m *ProductRepoMock) FindAll(cart productentity.ProductEntity) (error, []productentity.ProductEntity) {
	ret := _m.Called(cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	var r1 []productentity.ProductEntity
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) []productentity.ProductEntity); ok {
		r1 = rf(cart)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]productentity.ProductEntity)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: cart
func (_m *ProductRepoMock) Insert(cart productentity.ProductEntity) error {
	ret := _m.Called(cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: cart
func (_m *ProductRepoMock) Update(cart productentity.ProductEntity) error {
	ret := _m.Called(cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepoMock creates a new instance of ProductRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepoMock(t mockConstructorTestingTNewProductRepoMock) *ProductRepoMock {
	mock := &ProductRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
