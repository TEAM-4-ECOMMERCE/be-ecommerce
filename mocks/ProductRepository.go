// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	productentity "e-commerce/domains/product/entity"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepoMock is an autogenerated mock type for the IrepoProduct type
type ProductRepoMock struct {
	mock.Mock
}

// CountData provides a mock function with given fields: uid
func (_m *ProductRepoMock) CountData(uid uint) (uint, error) {
	ret := _m.Called(uid)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: product
func (_m *ProductRepoMock) Delete(product productentity.ProductEntity) (int, error) {
	ret := _m.Called(product)

	var r0 int
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) int); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: product
func (_m *ProductRepoMock) Find(product productentity.ProductEntity) (productentity.ProductEntity, error) {
	ret := _m.Called(product)

	var r0 productentity.ProductEntity
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) productentity.ProductEntity); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(productentity.ProductEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: product
func (_m *ProductRepoMock) FindAll(product productentity.ProductEntity) ([]productentity.ProductEntity, error) {
	ret := _m.Called(product)

	var r0 []productentity.ProductEntity
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) []productentity.ProductEntity); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productentity.ProductEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: product
func (_m *ProductRepoMock) Insert(product productentity.ProductEntity) (int, error) {
	ret := _m.Called(product)

	var r0 int
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) int); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: product
func (_m *ProductRepoMock) Update(product productentity.ProductEntity) (int, error) {
	ret := _m.Called(product)

	var r0 int
	if rf, ok := ret.Get(0).(func(productentity.ProductEntity) int); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productentity.ProductEntity) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepoMock creates a new instance of ProductRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepoMock(t mockConstructorTestingTNewProductRepoMock) *ProductRepoMock {
	mock := &ProductRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
