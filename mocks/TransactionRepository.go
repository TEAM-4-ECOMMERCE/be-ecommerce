// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	transactionentity "e-commerce/domains/transaction/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepoMock is an autogenerated mock type for the IrepoTransaction type
type TransactionRepoMock struct {
	mock.Mock
}

// Find provides a mock function with given fields: transaction
func (_m *TransactionRepoMock) Find(transaction transactionentity.TransactionEntity) (error, transactionentity.TransactionEntity) {
	ret := _m.Called(transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(transactionentity.TransactionEntity) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	var r1 transactionentity.TransactionEntity
	if rf, ok := ret.Get(1).(func(transactionentity.TransactionEntity) transactionentity.TransactionEntity); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Get(1).(transactionentity.TransactionEntity)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: transaction
func (_m *TransactionRepoMock) FindAll(transaction transactionentity.TransactionEntity) (error, []transactionentity.TransactionEntity) {
	ret := _m.Called(transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(transactionentity.TransactionEntity) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	var r1 []transactionentity.TransactionEntity
	if rf, ok := ret.Get(1).(func(transactionentity.TransactionEntity) []transactionentity.TransactionEntity); ok {
		r1 = rf(transaction)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]transactionentity.TransactionEntity)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: transaction
func (_m *TransactionRepoMock) Insert(transaction transactionentity.TransactionEntity) error {
	ret := _m.Called(transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(transactionentity.TransactionEntity) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: transaction
func (_m *TransactionRepoMock) Update(transaction transactionentity.TransactionEntity) error {
	ret := _m.Called(transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(transactionentity.TransactionEntity) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepoMock creates a new instance of TransactionRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepoMock(t mockConstructorTestingTNewTransactionRepoMock) *TransactionRepoMock {
	mock := &TransactionRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
