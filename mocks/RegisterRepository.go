// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	Register "e-commerce/domains/register/entity"

	mock "github.com/stretchr/testify/mock"
)

// RegisterRepository is an autogenerated mock type for the IregisterInterface type
type RegisterRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: dataCreate
func (_m *RegisterRepository) CreateUser(dataCreate Register.Registers) (int, error) {
	ret := _m.Called(dataCreate)

	var r0 int
	if rf, ok := ret.Get(0).(func(Register.Registers) int); ok {
		r0 = rf(dataCreate)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Register.Registers) error); ok {
		r1 = rf(dataCreate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegisterRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterRepository creates a new instance of RegisterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterRepository(t mockConstructorTestingTNewRegisterRepository) *RegisterRepository {
	mock := &RegisterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
